"use strict";
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var Rx_1 = require("rxjs/Rx");
require("rxjs/add/operator/map");
var post_1 = require("./post");
var category_1 = require("./category");
var PostService = (function () {
    function PostService(http) {
        this.http = http;
    }
    PostService.prototype.handleErrors = function (error) {
        console.log(JSON.stringify(error.json()));
        return Rx_1.Observable.throw(error);
    };
    PostService.prototype.getPosts = function (page, category) {
        var _this = this;
        var categoryFilter = "";
        if (category > 0) {
            categoryFilter = "&categories=" + category;
        }
        return this.http.get("http://blog.tangodev.it/wp-json/wp/v2/posts?page=" + page + "&per_page=20&_embed=1" + categoryFilter)
            .map(function (res) { return res.json(); })
            .map(function (data) {
            var postList = [];
            data.forEach(function (postJson) {
                postList.push(_this.getPostObjectFromJSON(postJson));
            });
            return postList;
        }).catch(this.handleErrors);
    };
    PostService.prototype.getPost = function (id) {
        var _this = this;
        return this.http.get("http://blog.tangodev.it/wp-json/wp/v2/posts/" + id)
            .map(function (res) { return res.json(); })
            .map(function (postJson) {
            return _this.getPostObjectFromJSON(postJson);
        }).catch(this.handleErrors);
    };
    PostService.prototype.getPostObjectFromJSON = function (postJson) {
        var post = new post_1.Post();
        post.id = postJson.id;
        post.title = postJson.title.rendered;
        post.content = postJson.content.rendered;
        return post;
    };
    PostService.prototype.getCategories = function () {
        var _this = this;
        return this.http.get("http://blog.tangodev.it/wp-json/wp/v2/categories")
            .map(function (res) { return res.json(); })
            .map(function (data) {
            var catList = [];
            catList.push(_this.getHomeCategory());
            data.forEach(function (categoryJson) {
                catList.push(_this.getCategoryObjectFromJSON(categoryJson));
            });
            return catList;
        }).catch(this.handleErrors);
    };
    PostService.prototype.getCategoryObjectFromJSON = function (categoryJson) {
        var category = new category_1.Category();
        category.id = categoryJson.id;
        category.name = categoryJson.name;
        return category;
    };
    PostService.prototype.getHomeCategory = function () {
        var category = new category_1.Category();
        category.id = 0;
        category.name = "Home";
        return category;
    };
    return PostService;
}());
PostService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http])
], PostService);
exports.PostService = PostService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicG9zdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzQ0FBMkM7QUFDM0Msc0NBQThDO0FBQzlDLDhCQUFxQztBQUNyQyxpQ0FBK0I7QUFFL0IsK0JBQThCO0FBQzlCLHVDQUFzQztBQUd0QyxJQUFhLFdBQVc7SUFFcEIscUJBQW9CLElBQVU7UUFBVixTQUFJLEdBQUosSUFBSSxDQUFNO0lBQUcsQ0FBQztJQUVsQyxrQ0FBWSxHQUFaLFVBQWEsS0FBZTtRQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMxQyxNQUFNLENBQUMsZUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQsOEJBQVEsR0FBUixVQUFTLElBQVksRUFBRSxRQUFnQjtRQUF2QyxpQkFjQztRQWJHLElBQUksY0FBYyxHQUFHLEVBQUUsQ0FBQztRQUN4QixFQUFFLENBQUEsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNkLGNBQWMsR0FBRyxjQUFjLEdBQUcsUUFBUSxDQUFDO1FBQy9DLENBQUM7UUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsbURBQW1ELEdBQUcsSUFBSSxHQUFHLHVCQUF1QixHQUFHLGNBQWMsQ0FBQzthQUN0SCxHQUFHLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQVYsQ0FBVSxDQUFDO2FBQ3RCLEdBQUcsQ0FBQyxVQUFBLElBQUk7WUFDTCxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFDbEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFDLFFBQVE7Z0JBQ2xCLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7WUFDdkQsQ0FBQyxDQUFDLENBQUM7WUFDSCxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELDZCQUFPLEdBQVAsVUFBUSxFQUFVO1FBQWxCLGlCQU1DO1FBTEcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLDhDQUE4QyxHQUFHLEVBQUUsQ0FBQzthQUNwRSxHQUFHLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQVYsQ0FBVSxDQUFDO2FBQ3RCLEdBQUcsQ0FBQyxVQUFBLFFBQVE7WUFDVCxNQUFNLENBQUMsS0FBSSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hELENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELDJDQUFxQixHQUFyQixVQUFzQixRQUFRO1FBQzFCLElBQUksSUFBSSxHQUFHLElBQUksV0FBSSxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLEVBQUUsR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7UUFDckMsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUN6QyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxtQ0FBYSxHQUFiO1FBQUEsaUJBV0M7UUFWRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsa0RBQWtELENBQUM7YUFDbkUsR0FBRyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFWLENBQVUsQ0FBQzthQUN0QixHQUFHLENBQUMsVUFBQSxJQUFJO1lBQ0wsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ2pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7WUFDckMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFDLFlBQVk7Z0JBQ3RCLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLHlCQUF5QixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUE7WUFDOUQsQ0FBQyxDQUFDLENBQUM7WUFDSCxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELCtDQUF5QixHQUF6QixVQUEwQixZQUFZO1FBQ2xDLElBQUksUUFBUSxHQUFHLElBQUksbUJBQVEsRUFBRSxDQUFDO1FBQzlCLFFBQVEsQ0FBQyxFQUFFLEdBQUcsWUFBWSxDQUFDLEVBQUUsQ0FBQztRQUM5QixRQUFRLENBQUMsSUFBSSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUM7UUFDbEMsTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUNwQixDQUFDO0lBRUQscUNBQWUsR0FBZjtRQUNJLElBQUksUUFBUSxHQUFHLElBQUksbUJBQVEsRUFBRSxDQUFDO1FBQzlCLFFBQVEsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLFFBQVEsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDcEIsQ0FBQztJQUNMLGtCQUFDO0FBQUQsQ0FBQyxBQW5FRCxJQW1FQztBQW5FWSxXQUFXO0lBRHZCLGlCQUFVLEVBQUU7cUNBR2lCLFdBQUk7R0FGckIsV0FBVyxDQW1FdkI7QUFuRVksa0NBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEh0dHAsIEhlYWRlcnMgfSBmcm9tIFwiQGFuZ3VsYXIvaHR0cFwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzL1J4XCI7XG5pbXBvcnQgXCJyeGpzL2FkZC9vcGVyYXRvci9tYXBcIjtcblxuaW1wb3J0IHsgUG9zdCB9IGZyb20gXCIuL3Bvc3RcIjtcbmltcG9ydCB7IENhdGVnb3J5IH0gZnJvbSBcIi4vY2F0ZWdvcnlcIjtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBvc3RTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cCkge31cblxuICAgIGhhbmRsZUVycm9ycyhlcnJvcjogUmVzcG9uc2UpIHtcbiAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoZXJyb3IuanNvbigpKSk7XG4gICAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KGVycm9yKTtcbiAgICB9XG5cbiAgICBnZXRQb3N0cyhwYWdlOiBudW1iZXIsIGNhdGVnb3J5OiBudW1iZXIpIHtcbiAgICAgICAgbGV0IGNhdGVnb3J5RmlsdGVyID0gXCJcIjtcbiAgICAgICAgaWYoY2F0ZWdvcnkgPiAwKSB7XG4gICAgICAgICAgICBjYXRlZ29yeUZpbHRlciA9IFwiJmNhdGVnb3JpZXM9XCIgKyBjYXRlZ29yeTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldChcImh0dHA6Ly9ibG9nLnRhbmdvZGV2Lml0L3dwLWpzb24vd3AvdjIvcG9zdHM/cGFnZT1cIiArIHBhZ2UgKyBcIiZwZXJfcGFnZT0yMCZfZW1iZWQ9MVwiICsgY2F0ZWdvcnlGaWx0ZXIpXG4gICAgICAgICAgICAubWFwKHJlcyA9PiByZXMuanNvbigpKVxuICAgICAgICAgICAgLm1hcChkYXRhID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcG9zdExpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICBkYXRhLmZvckVhY2goKHBvc3RKc29uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHBvc3RMaXN0LnB1c2godGhpcy5nZXRQb3N0T2JqZWN0RnJvbUpTT04ocG9zdEpzb24pKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBwb3N0TGlzdDtcbiAgICAgICAgICAgIH0pLmNhdGNoKHRoaXMuaGFuZGxlRXJyb3JzKTtcbiAgICB9XG5cbiAgICBnZXRQb3N0KGlkOiBTdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoXCJodHRwOi8vYmxvZy50YW5nb2Rldi5pdC93cC1qc29uL3dwL3YyL3Bvc3RzL1wiICsgaWQpXG4gICAgICAgICAgICAubWFwKHJlcyA9PiByZXMuanNvbigpKVxuICAgICAgICAgICAgLm1hcChwb3N0SnNvbiA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UG9zdE9iamVjdEZyb21KU09OKHBvc3RKc29uKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKHRoaXMuaGFuZGxlRXJyb3JzKTtcbiAgICB9XG5cbiAgICBnZXRQb3N0T2JqZWN0RnJvbUpTT04ocG9zdEpzb24pIHtcbiAgICAgICAgbGV0IHBvc3QgPSBuZXcgUG9zdCgpO1xuICAgICAgICBwb3N0LmlkID0gcG9zdEpzb24uaWQ7XG4gICAgICAgIHBvc3QudGl0bGUgPSBwb3N0SnNvbi50aXRsZS5yZW5kZXJlZDtcbiAgICAgICAgcG9zdC5jb250ZW50ID0gcG9zdEpzb24uY29udGVudC5yZW5kZXJlZDtcbiAgICAgICAgcmV0dXJuIHBvc3Q7XG4gICAgfVxuXG4gICAgZ2V0Q2F0ZWdvcmllcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoXCJodHRwOi8vYmxvZy50YW5nb2Rldi5pdC93cC1qc29uL3dwL3YyL2NhdGVnb3JpZXNcIilcbiAgICAgICAgICAgIC5tYXAocmVzID0+IHJlcy5qc29uKCkpXG4gICAgICAgICAgICAubWFwKGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBjYXRMaXN0ID0gW107XG4gICAgICAgICAgICAgICAgY2F0TGlzdC5wdXNoKHRoaXMuZ2V0SG9tZUNhdGVnb3J5KCkpO1xuICAgICAgICAgICAgICAgIGRhdGEuZm9yRWFjaCgoY2F0ZWdvcnlKc29uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNhdExpc3QucHVzaCh0aGlzLmdldENhdGVnb3J5T2JqZWN0RnJvbUpTT04oY2F0ZWdvcnlKc29uKSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2F0TGlzdDtcbiAgICAgICAgICAgIH0pLmNhdGNoKHRoaXMuaGFuZGxlRXJyb3JzKTtcbiAgICB9XG5cbiAgICBnZXRDYXRlZ29yeU9iamVjdEZyb21KU09OKGNhdGVnb3J5SnNvbikge1xuICAgICAgICBsZXQgY2F0ZWdvcnkgPSBuZXcgQ2F0ZWdvcnkoKTtcbiAgICAgICAgY2F0ZWdvcnkuaWQgPSBjYXRlZ29yeUpzb24uaWQ7XG4gICAgICAgIGNhdGVnb3J5Lm5hbWUgPSBjYXRlZ29yeUpzb24ubmFtZTtcbiAgICAgICAgcmV0dXJuIGNhdGVnb3J5O1xuICAgIH1cblxuICAgIGdldEhvbWVDYXRlZ29yeSgpIHtcbiAgICAgICAgbGV0IGNhdGVnb3J5ID0gbmV3IENhdGVnb3J5KCk7XG4gICAgICAgIGNhdGVnb3J5LmlkID0gMDtcbiAgICAgICAgY2F0ZWdvcnkubmFtZSA9IFwiSG9tZVwiO1xuICAgICAgICByZXR1cm4gY2F0ZWdvcnk7XG4gICAgfVxufVxuIl19